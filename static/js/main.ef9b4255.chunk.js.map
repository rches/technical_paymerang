{"version":3,"sources":["components/Header.js","components/CustomerCard.js","components/Filter.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","moment","require","CustomerCard","props","useState","visible","setValue","sample","Payee","Name","Fax","Phone","Address","Attention","SubmissionDate","Payment","PAN","CVV","Exp","remittanceMap","Remittance","map","el","i","key","PayorName","PayorId","InvoiceNo","Description","Amount","onClick","e","preventDefault","format","Address1","Address2","City","StateOrProvince","Country","PostalCode","Filter","filter","setFilter","type","id","value","onChange","target","filterHandleChange","Pagination","pages","niceNumber","Math","ceil","length","push","handlePageSelect","App","setState","activePage","makePage","arr","perPage","whatPage","slice","filterWord","state","activeData","filterData","prevProps","prevState","filterArray","this","includes","toUpperCase","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef9b4255.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header__\">\r\n            <div className=\"row\">\r\n                <div className=\"one-half column\">\r\n                    <img src=\"logo.png\" alt=\"Paymerang Logo\"></img>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nconst moment = require(\"moment\");\r\n\r\nconst CustomerCard = props => {\r\n    const [visible, setValue] = useState(false);\r\n\r\n    const handleClick = e => {\r\n        e.preventDefault();\r\n        setValue(!visible);\r\n    };\r\n\r\n    const sample = props.sample;\r\n\r\n    const {\r\n        Name,\r\n        Fax,\r\n        Phone,\r\n        Address,\r\n        Attention,\r\n        SubmissionDate\r\n    } = sample.Payee;\r\n    const { PAN, CVV, Exp } = sample.Payment;\r\n\r\n    const remittanceMap = sample.Remittance.map((el, i) => {\r\n        return (\r\n            <li className=\"contactCard__ remit__\" key={i}>\r\n                {el.PayorName && <p>{el.PayorName}</p>}\r\n                {el.PayorId && <p>ID: {el.PayorId}</p>}\r\n                {el.InvoiceNo && <p>Invoice: {el.InvoiceNo}</p>}\r\n                {el.Description && <p>{el.Description}</p>}\r\n                {el.Amount && <p>Amount: {el.Amount}</p>}\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row clicker__\" onClick={handleClick}>\r\n                <div className=\"six columns\">\r\n                    <h5>{Name}</h5>\r\n                </div>\r\n\r\n                {SubmissionDate && (\r\n                    <div className=\"six columns\">\r\n                        <h5>\r\n                            Submitted on{\" \"}\r\n                            {moment(SubmissionDate, \"YYYY-MM-DD\").format(\"LL\")}\r\n                        </h5>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {visible && (\r\n                <div className=\"row\">\r\n                    <div className=\"six columns\">\r\n                        <div className=\"contactCard__ shadowBox__\">\r\n                            <h5>Customer Contact</h5>\r\n                            {Attention && <p>{Attention}</p>}\r\n                            {Phone && <p>Phone: {Phone}</p>}\r\n                            {Fax && <p>Fax: {Fax}</p>}\r\n                            {Address.Address1 && <p>{Address.Address1}</p>}\r\n                            {Address.Address2 && <p>{Address.Address2}</p>}\r\n                            {Address.City &&\r\n                                Address.StateOrProvince &&\r\n                                Address.Country &&\r\n                                Address.PostalCode && (\r\n                                    <p>\r\n                                        {Address.City},{\" \"}\r\n                                        {Address.StateOrProvince}{\" \"}\r\n                                        {Address.Country} {Address.PostalCode}\r\n                                    </p>\r\n                                )}\r\n                        </div>\r\n\r\n                        <div className=\"contactCard__ shadowBox__\">\r\n                            <h5>Payment</h5>\r\n                            <div>\r\n                                {PAN && <p>PAN: {PAN}</p>}\r\n                                {CVV && <p>CVV: {CVV}</p>}\r\n                                {Exp && <p>Expiration: {Exp}</p>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"six columns shadowBox__\">\r\n                        <h5>Remittance</h5>\r\n                        <ul className=\"remit__\">{remittanceMap}</ul>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomerCard;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Filter = props => {\r\n    const [filter, setFilter] = useState(\"\");\r\n\r\n    const handleFilter = e => {\r\n        setFilter(e.target.value);\r\n        props.filterHandleChange(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"twelve columns\">\r\n                    <input\r\n                        className=\"filter__ \"\r\n                        type=\"text\"\r\n                        id=\"filter\"\r\n                        value={filter}\r\n                        onChange={handleFilter}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst Pagination = props => {\r\n    const sample = props.sample;\r\n    const pages = [];\r\n    const niceNumber = Math.ceil(sample.length / 5);\r\n\r\n    for (let i = 1; i <= niceNumber; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <ul className=\"nav__\">\r\n            {pages.map(i => {\r\n                return (\r\n                    <li key={i}>\r\n                        <button\r\n                            className=\"navButton\"\r\n                            onClick={props.handlePageSelect}\r\n                            value={i}\r\n                        >\r\n                            {i}\r\n                        </button>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport CustomerCard from \"./components/CustomerCard\";\r\nimport Filter from \"./components/Filter\";\r\nimport Pagination from \"./components/Pagination\";\r\nconst sample = require(\"./data/sample.json\");\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activePage: 1,\r\n            activeData: [],\r\n            filterData: [],\r\n            filterWord: \"\"\r\n        };\r\n    }\r\n    handlePageSelect = e => {\r\n        e.preventDefault();\r\n        this.setState({ activePage: e.target.value });\r\n    };\r\n\r\n    makePage = (arr, perPage, whatPage) => {\r\n        return arr.slice((whatPage - 1) * perPage, whatPage * perPage);\r\n    };\r\n\r\n    filterHandleChange = e => {\r\n        this.setState({ filterWord: e });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let filterArray;\r\n        if (this.state.filterWord !== prevState.filterWord) {\r\n            filterArray = sample.filter(el =>\r\n                el.Payee.Name.includes(this.state.filterWord.toUpperCase())\r\n            );\r\n            console.log(filterArray);\r\n\r\n            this.setState({\r\n                activePage: 1,\r\n                activeData: this.makePage(filterArray, 5, this.state.activePage)\r\n            });\r\n        }\r\n\r\n        if (this.state.activePage !== prevState.activePage) {\r\n            this.setState({\r\n                activeData: this.makePage(sample, 5, this.state.activePage)\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            activeData: this.makePage(sample, 5, this.state.activePage)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app__\">\r\n                <Header />\r\n                <Filter filterHandleChange={this.filterHandleChange} />\r\n                <Pagination\r\n                    sample={sample}\r\n                    handlePageSelect={this.handlePageSelect}\r\n                />\r\n                <div className=\"custContainer__\">\r\n                    {this.state.activeData.map((el, i) => {\r\n                        return (\r\n                            <div className=\"eachBody__\" key={i}>\r\n                                <CustomerCard sample={el} />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}